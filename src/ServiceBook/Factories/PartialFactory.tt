<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly  name="System.Core" #>
<#@ import namespace="System.Linq" #>
namespace ServiceBook.Factories
{
<# for(int i=0; i<16-1; i++){
    var tResultArgs = String.Concat(Enumerable.Range(2,i).Select(it=>String.Format(",T{0}",it-1)));
    var tInputArgs = String.Concat(Enumerable.Range(1,i+1).Select(it=>String.Format(",T{0}",it)));
    var tMethodArgs = String.Join(", ", Enumerable.Range(2,i).Select(it=>String.Format("Factory<T{0}> arg{0}",it-1)));
    var tLastArg = String.Format("T{0}",i+1);
    var tLastArgName = String.Format("arg{0}",i+1);
    var tCallArgs = String.Join(", ", Enumerable.Range(2,i).Select(it=>String.Format("arg{0}",it-1)).Concat(Enumerable.Repeat("_"+tLastArgName, 1)));
#>
    public class PartialFactory<T<#=tInputArgs#>> :
        Factory<T<#=tResultArgs#>>
    {
        readonly Factory<<#=tLastArg#>> _<#=tLastArgName#>;
        readonly Factory<T<#=tInputArgs#>> _factory;

        public PartialFactory(Factory<T<#=tInputArgs#>> factory, Factory<<#=tLastArg#>> <#=tLastArgName#>)
        {
            _factory = factory;
            _<#=tLastArgName#> = <#=tLastArgName#>;
        }

        public T Get(<#=tMethodArgs#>)
        {
            return _factory.Get(<#=tCallArgs#>);
        }
    }

<# 
    }
#>
}
