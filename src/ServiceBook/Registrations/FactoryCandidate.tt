<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly  name="System.Core" #>
<#@ import namespace="System.Linq" #>
namespace ServiceBook.Registrations
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// A candidate for a factory that would satisfy a registration
    /// </summary>
    public interface FactoryCandidate
    {
        /// <summary>
        /// The type the factory creates
        /// </summary>
        Type FactoryType { get; }

        /// <summary>
        /// The type of dependencies required by the factory
        /// </summary>
        IEnumerable<Dependency> Dependencies { get; }
    }

<# for(int i=0; i<16; i++){
    var tResultArgs = String.Concat(Enumerable.Range(1,i).Select(it=>String.Format(",T{0}",it)));
    var tInputArgs = String.Concat(Enumerable.Range(1,i).Select(it=>String.Format(",T{0}",it)));
    var tFuncArgs = String.Join(",",Enumerable.Range(1,i).Select(it=>String.Format("T{0}",it)).Concat(Enumerable.Repeat("T",1)));
    var tMethodArgs = String.Join(", ", Enumerable.Range(1,i).Select(it=>String.Format("Factory<T{0}> arg{0}",it)));
    var tLastArg = String.Format("T{0}",i+1);
    var tLastArgName = String.Format("arg{0}",i+1);
    var tCallArgs = String.Join(", ", Enumerable.Range(1,i).Select(it=>String.Format("arg{0}.Get()",it)));
#>
    public interface FactoryCandidate<T<#=tInputArgs#>> :
        FactoryCandidate
    {
    }

<# 
    }
#>
}
